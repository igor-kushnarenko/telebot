import sys
import time

import telebot
from telebot.types import Message

import schedule_parser
from scripts.add_user import add_user, read_user_set
from parsers.megaparser import parser_dict
from settings import TOKEN
from scripts import keyboards
from scripts.logg import log, configure_logging
from text_data import text_data

bot = telebot.TeleBot(TOKEN)
main_keyboard = keyboards.main_keyboard()
food_keyboard = keyboards.food_keyboard()
schedule_keyboard = keyboards.schedule_keyboard()
contacts_keyboard = keyboards.contacts_keyboard()
services_keydoars = keyboards.services_keyboard()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    add_user(message)
    bot.send_message(
        message.chat.id,
        text_data['instruction']['start'],
        reply_markup=main_keyboard
    )


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(
        message.chat.id,
        text_data['instruction']['help'],
        reply_markup=main_keyboard,
    )


@bot.message_handler(content_types=['text'])
def inline_key(message: Message):
    log.info(f'{message.from_user.id}, {message.from_user.first_name} => {message.text}')

    # –ü–ò–¢–ê–ù–ò–ï
    if message.text == 'üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ':
        bot.send_message(
            message.chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ',
            reply_markup=food_keyboard,
        )
    elif message.text == 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã':
        bot.send_message(
            message.chat.id,
            text=parser_dict['rest_list'],
            reply_markup=food_keyboard,
            disable_web_page_preview=True,
        )
    elif message.text == 'üç∏ –ë–∞—Ä—ã':
        bot.send_message(
            message.chat.id,
            text=parser_dict['bar_list'],
            reply_markup=food_keyboard,
            disable_web_page_preview=True,
        )
    elif message.text == 'üå≠ –°–Ω–µ–∫-–±–∞—Ä—ã':
        bot.send_message(
            message.chat.id,
            text=parser_dict['sneck_list'],
            reply_markup=food_keyboard,
            disable_web_page_preview=True,
        )
    elif message.text == 'üç® –î–µ—Ç—è–º':
        bot.send_message(
            message.chat.id,
            text=parser_dict['child_list'],
            reply_markup=food_keyboard,
            disable_web_page_preview=True,
        )

    # –†–ê–°–ü–ò–°–ê–ù–ò–ï
    elif message.text == 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
        bot.send_message(
            message.chat.id,
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:',
            reply_markup=schedule_keyboard,
        )
    elif message.text == '7Ô∏è‚É£ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 7 –¥–Ω–µ–π':
        bot.send_message(
            message.chat.id,
            text=parser_dict['calendar_parser'],
            reply_markup=schedule_keyboard,
        )
    elif message.text == 'üéÜ –í–µ—á–µ—Ä–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        image_name = 'animation_week.jpg'
        file = schedule_parser.schedule_open_img(image_name)
        try:
            image = open(file, 'rb')
            bot.send_photo(
                message.chat.id,
                image,
                reply_markup=schedule_keyboard,
            )
        except:
            bot.send_message(
                message.chat.id,
                text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                reply_markup=schedule_keyboard,
            )
    elif message.text == '‚òÄÔ∏è –î–Ω–µ–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        bot.send_message(
            message.chat.id,
            text=schedule_parser.schedule_day_parser,
            reply_markup=schedule_keyboard,
            disable_web_page_preview=True,
        )
    elif message.text == 'üíª –°—Ç—É–¥–∏—è 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è':
        IMAGE_NAME = 'media_studio.jpg'
        file = schedule_parser.schedule_open_img(IMAGE_NAME)
        try:
            image = open(file, 'rb')
            bot.send_photo(
                message.chat.id,
                image,
                reply_markup=schedule_keyboard,
            )
        except:
            bot.send_message(
                message.chat.id,
                text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                reply_markup=schedule_keyboard,
            )
    elif message.text == 'ü•ó –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å':
        IMAGE_NAME = 'kulinarny_master_class.jpg'
        file = schedule_parser.schedule_open_img(IMAGE_NAME)
        try:
            image = open(file, 'rb')
            bot.send_photo(
                message.chat.id,
                image,
                reply_markup=schedule_keyboard,
            )
        except:
            bot.send_message(
                message.chat.id,
                text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                reply_markup=schedule_keyboard,
            )

    elif message.text == '‚ùáÔ∏è –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏':
        bot.send_message(
            message.chat.id,
            text=parser_dict['promotion_parser'],
            reply_markup=main_keyboard,
            disable_web_page_preview=True,
        )

    elif message.text == 'üåê –°–≤—è–∑—å —Å –Ω–∞–º–∏':
        bot.send_message(
            message.chat.id,
            text=text_data['contacts'],
            reply_markup=contacts_keyboard,
        )

    elif message.text == 'üîî –£—Å–ª—É–≥–∏':
        bot.send_message(
            message.chat.id,
            text='–ù–∞—à–∏ —É—Å–ª—É–≥–∏: ',
            reply_markup=services_keydoars,
        )

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(
            message.chat.id,
            text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=main_keyboard,
        )

    elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        answer = read_user_set()
        bot.send_message(
            message.chat.id,
            text=answer,
            reply_markup=main_keyboard,
        )

    else:
        bot.send_message(
            message.chat.id,
            text=text_data['instruction']['help'],
            reply_markup=main_keyboard,
            disable_web_page_preview=True,
        )


def main_loop():
    bot.polling(True)
    while 1:
        time.sleep(3)


if __name__ == '__main__':
    configure_logging()
    try:
        main_loop()
    except KeyboardInterrupt:
        print('\nExiting by user request.\n')
        sys.exit(0)
